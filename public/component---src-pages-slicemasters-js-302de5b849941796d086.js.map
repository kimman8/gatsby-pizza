{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["PaginationStyles","styled","div","Pagination","pageSize","base","skip","totalCount","currentPage","totalPages","Math","ceil","prevPage","nextPage","hasNextPage","hasPrevPage","disabled","to","Array","from","length","map","_","i","className","SingleSlicemasterStyles","SlicemasterGridStyles","SlicesmastersPage","data","pageContext","slicemasters","nodes","SEO","title","parseInt","process","slicemaster","slug","current","key","id","name","fluid","image","asset","alt","description","query"],"mappings":"sPAIMA,EAAmBC,IAAOC,IAAV,mFAAGD,CAAH,iUAwBP,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,SAEAC,GAGC,EAJDC,KAIC,EAHDD,MACAE,EAEC,EAFDA,WACAC,EACC,EADDA,YAGMC,EAAaC,KAAKC,KAAKJ,EAAaH,GACpCQ,EAAWJ,EAAc,EACzBK,EAAWL,EAAc,EACzBM,EAAcD,GAAYJ,EAC1BM,EAAcH,EAAW,EAE/B,OACE,kBAACZ,EAAD,KACE,kBAAC,IAAD,CAAMgB,UAAWD,EAAaE,GAAOZ,EAAL,IAAaO,GAA7C,SAGCM,MAAMC,KAAK,CAAEC,OAAQX,IAAcY,KAAI,SAACC,EAAGC,GAAJ,OACtC,kBAAC,IAAD,CACEN,GAAOZ,EAAL,KAAakB,EAAI,EAAIA,EAAI,EAAI,IAC/BC,UAAiB,IAAND,GAA2B,IAAhBf,EAAoB,UAAY,IAErDe,EAAI,MAGT,kBAAC,IAAD,CAAMP,UAAWF,EAAaG,GAAOZ,EAAL,IAAaQ,GAA7C,U,gBChDAY,EAA0BxB,IAAOC,IAAV,4FAAGD,CAAH,gUA0BvByB,EAAwBzB,IAAOC,IAAV,0FAAGD,CAAH,sFAMZ,SAAS0B,EAAT,GAAmD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAC1CC,EAAeF,EAAKE,aAAaC,MACvC,OACE,6BACE,kBAACC,EAAA,EAAD,CAAKC,MAAK,wBAAyBJ,EAAYrB,aAAe,KAC9D,kBAACL,EAAD,CACEC,SAAU8B,SAASC,KACnB7B,KAAMuB,EAAYvB,KAClBD,KAAK,gBACLE,WAAYqB,EAAKE,aAAavB,WAC9BC,YAAaqB,EAAYrB,aAAe,IAE1C,kBAACkB,EAAD,KACGI,EAAaT,KAAI,SAACe,GAAD,OAChB,kBAACX,EAAD,KACE,kBAAC,IAAD,CACER,GAAE,eAAiBmB,EAAYC,KAAKC,QACpCC,IAAKH,EAAYI,IAEjB,4BACE,0BAAMhB,UAAU,QAAQY,EAAYK,QAGxC,kBAAC,IAAD,CAAKC,MAAON,EAAYO,MAAMC,MAAMF,MAAOG,IAAI,KAC/C,uBAAGrB,UAAU,eAAeY,EAAYU,mBAQ7C,IAAMC,EAAK","file":"component---src-pages-slicemasters-js-302de5b849941796d086.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst PaginationStyles = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid var(--grey);\n  margin: 2rem 0rem;\n  border-radius: 5px;\n  text-align: center;\n  & > * {\n    padding: 1rem;\n    flex: 1;\n    text-decoration: none;\n    border-right: 1px solid var(--grey);\n    &[aria-current],\n    &.current {\n      color: var(--red);\n    }\n    &[disabled] {\n      pointer-events: none;\n      color: var(--grey);\n    }\n  }\n`;\n\nexport default function Pagination({\n  pageSize,\n  skip,\n  base,\n  totalCount,\n  currentPage,\n}) {\n  // make some variables\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  const hasNextPage = nextPage <= totalPages;\n  const hasPrevPage = prevPage > 0;\n\n  return (\n    <PaginationStyles>\n      <Link disabled={!hasPrevPage} to={`${base}/${prevPage}`}>\n        &#8592;Prev\n      </Link>\n      {Array.from({ length: totalPages }).map((_, i) => (\n        <Link\n          to={`${base}/${i > 0 ? i + 1 : ''}`}\n          className={i === 0 && currentPage === 1 ? 'current' : ''}\n        >\n          {i + 1}\n        </Link>\n      ))}\n      <Link disabled={!hasNextPage} to={`${base}/${nextPage}`}>\n        Next&#8594;\n      </Link>\n    </PaginationStyles>\n  );\n}\n","import { graphql, Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Pagination from \"../components/Pagination\";\nimport SEO from \"../components/SEO\";\n\nconst SingleSlicemasterStyles = styled.div`\n  padding: 2rem;\n  text-align: center;\n  a {\n    text-decoration: none;\n  }\n  .gatsby-image-wrapper {\n    height: 400px;\n  }\n  h2 {\n    transform: rotate(-2deg);\n    font-size: 4rem;\n    margin-bottom: -2rem;\n    position: relative;\n    z-index: 2;\n  }\n  .description {\n    background: var(--yellow);\n    padding: 1rem;\n    margin: 2rem;\n    margin-top: -6rem;\n    position: relative;\n    z-index: 2;\n    transform: rotate(1deg);\n  }\n`;\nconst SlicemasterGridStyles = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 2rem;\n`;\n\nexport default function SlicesmastersPage({ data, pageContext }) {\n  const slicemasters = data.slicemasters.nodes;\n  return (\n    <div>\n      <SEO title={`Slicemasters - Page ${pageContext.currentPage || 1}`} />\n      <Pagination\n        pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}\n        skip={pageContext.skip}\n        base=\"/slicemasters\"\n        totalCount={data.slicemasters.totalCount}\n        currentPage={pageContext.currentPage || 1}\n      />\n      <SlicemasterGridStyles>\n        {slicemasters.map((slicemaster) => (\n          <SingleSlicemasterStyles>\n            <Link\n              to={`slicemaster/${slicemaster.slug.current}`}\n              key={slicemaster.id}\n            >\n              <h2>\n                <span className=\"mark\">{slicemaster.name}</span>\n              </h2>\n            </Link>\n            <Img fluid={slicemaster.image.asset.fluid} alt=\"\" />\n            <p className=\"description\">{slicemaster.description}</p>\n          </SingleSlicemasterStyles>\n        ))}\n      </SlicemasterGridStyles>\n    </div>\n  );\n}\n\nexport const query = graphql`\n  query($skip: Int = 0, $pageSize: Int = 2) {\n    slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\n      totalCount\n      nodes {\n        name\n        id\n        slug {\n          current\n        }\n        description\n        image {\n          asset {\n            fluid(maxWidth: 410) {\n              ...GatsbySanityImageFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}
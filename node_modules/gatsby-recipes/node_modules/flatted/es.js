self.Flatted=function(t){"use strict";
/*! (c) 2020 Andrea Giammarchi */const{parse:e,stringify:n}=JSON,{keys:r}=Object,s=String,c="string",o="object",i=(t,e)=>e,a=t=>t instanceof s?s(t):t,l=(t,e)=>typeof e===c?new s(e):e,f=(t,e,n,c)=>r(n).reduce((n,r)=>{const i=n[r];if(i instanceof s){const s=t[i];typeof s!==o||e.has(s)?n[r]=c.call(n,r,s):(e.add(s),n[r]=c.call(n,r,f(t,e,s,c)))}else n[r]=c.call(n,r,i);return n},n),u=(t,e,n)=>{const r=s(e.push(n)-1);return t.set(n,r),r};return t.parse=(t,n)=>{const r=e(t,l).map(a),s=r[0],c=n||i,u=typeof s===o&&s?f(r,new Set,s,c):s;return c.call({"":u},"",u)},t.stringify=(t,e,r)=>{const s=e&&typeof e===o?(t,n)=>""===t||-1<e.indexOf(t)?n:void 0:e||i,a=new Map,l=[],f=[];let p=+u(a,l,s.call({"":t},"",t)),y=!p;for(;p<l.length;)y=!0,f[p]=n(l[p++],d,r);return"["+f.join(",")+"]";function d(t,e){if(y)return y=!y,e;const n=s.call(this,t,e);switch(typeof n){case o:if(null===n)return n;case c:return a.get(n)||u(a,l,n)}return n}},t}({});
